{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Glob = void 0;\nconst minimatch_1 = require(\"minimatch\");\nconst path_scurry_1 = require(\"path-scurry\");\nconst url_1 = require(\"url\");\nconst pattern_js_1 = require(\"./pattern.js\");\nconst walker_js_1 = require(\"./walker.js\");\n// if no process global, just call it linux.\n// so we default to case-sensitive, / separators\nconst defaultPlatform = typeof process === 'object' && process && typeof process.platform === 'string' ? process.platform : 'linux';\n/**\n * An object that can perform glob pattern traversals.\n */\nclass Glob {\n  absolute;\n  cwd;\n  root;\n  dot;\n  dotRelative;\n  follow;\n  ignore;\n  magicalBraces;\n  mark;\n  matchBase;\n  maxDepth;\n  nobrace;\n  nocase;\n  nodir;\n  noext;\n  noglobstar;\n  pattern;\n  platform;\n  realpath;\n  scurry;\n  stat;\n  signal;\n  windowsPathsNoEscape;\n  withFileTypes;\n  /**\n   * The options provided to the constructor.\n   */\n  opts;\n  /**\n   * An array of parsed immutable {@link Pattern} objects.\n   */\n  patterns;\n  /**\n   * All options are stored as properties on the `Glob` object.\n   *\n   * See {@link GlobOptions} for full options descriptions.\n   *\n   * Note that a previous `Glob` object can be passed as the\n   * `GlobOptions` to another `Glob` instantiation to re-use settings\n   * and caches with a new pattern.\n   *\n   * Traversal functions can be called multiple times to run the walk\n   * again.\n   */\n  constructor(pattern, opts) {\n    /* c8 ignore start */\n    if (!opts) throw new TypeError('glob options required');\n    /* c8 ignore stop */\n    this.withFileTypes = !!opts.withFileTypes;\n    this.signal = opts.signal;\n    this.follow = !!opts.follow;\n    this.dot = !!opts.dot;\n    this.dotRelative = !!opts.dotRelative;\n    this.nodir = !!opts.nodir;\n    this.mark = !!opts.mark;\n    if (!opts.cwd) {\n      this.cwd = '';\n    } else if (opts.cwd instanceof URL || opts.cwd.startsWith('file://')) {\n      opts.cwd = (0, url_1.fileURLToPath)(opts.cwd);\n    }\n    this.cwd = opts.cwd || '';\n    this.root = opts.root;\n    this.magicalBraces = !!opts.magicalBraces;\n    this.nobrace = !!opts.nobrace;\n    this.noext = !!opts.noext;\n    this.realpath = !!opts.realpath;\n    this.absolute = opts.absolute;\n    this.noglobstar = !!opts.noglobstar;\n    this.matchBase = !!opts.matchBase;\n    this.maxDepth = typeof opts.maxDepth === 'number' ? opts.maxDepth : Infinity;\n    this.stat = !!opts.stat;\n    this.ignore = opts.ignore;\n    if (this.withFileTypes && this.absolute !== undefined) {\n      throw new Error('cannot set absolute and withFileTypes:true');\n    }\n    if (typeof pattern === 'string') {\n      pattern = [pattern];\n    }\n    this.windowsPathsNoEscape = !!opts.windowsPathsNoEscape || opts.allowWindowsEscape === false;\n    if (this.windowsPathsNoEscape) {\n      pattern = pattern.map(p => p.replace(/\\\\/g, '/'));\n    }\n    if (this.matchBase) {\n      if (opts.noglobstar) {\n        throw new TypeError('base matching requires globstar');\n      }\n      pattern = pattern.map(p => p.includes('/') ? p : `./**/${p}`);\n    }\n    this.pattern = pattern;\n    this.platform = opts.platform || defaultPlatform;\n    this.opts = {\n      ...opts,\n      platform: this.platform\n    };\n    if (opts.scurry) {\n      this.scurry = opts.scurry;\n      if (opts.nocase !== undefined && opts.nocase !== opts.scurry.nocase) {\n        throw new Error('nocase option contradicts provided scurry option');\n      }\n    } else {\n      const Scurry = opts.platform === 'win32' ? path_scurry_1.PathScurryWin32 : opts.platform === 'darwin' ? path_scurry_1.PathScurryDarwin : opts.platform ? path_scurry_1.PathScurryPosix : path_scurry_1.PathScurry;\n      this.scurry = new Scurry(this.cwd, {\n        nocase: opts.nocase,\n        fs: opts.fs\n      });\n    }\n    this.nocase = this.scurry.nocase;\n    // If you do nocase:true on a case-sensitive file system, then\n    // we need to use regexps instead of strings for non-magic\n    // path portions, because statting `aBc` won't return results\n    // for the file `AbC` for example.\n    const nocaseMagicOnly = this.platform === 'darwin' || this.platform === 'win32';\n    const mmo = {\n      // default nocase based on platform\n      ...opts,\n      dot: this.dot,\n      matchBase: this.matchBase,\n      nobrace: this.nobrace,\n      nocase: this.nocase,\n      nocaseMagicOnly,\n      nocomment: true,\n      noext: this.noext,\n      nonegate: true,\n      optimizationLevel: 2,\n      platform: this.platform,\n      windowsPathsNoEscape: this.windowsPathsNoEscape,\n      debug: !!this.opts.debug\n    };\n    const mms = this.pattern.map(p => new minimatch_1.Minimatch(p, mmo));\n    const [matchSet, globParts] = mms.reduce((set, m) => {\n      set[0].push(...m.set);\n      set[1].push(...m.globParts);\n      return set;\n    }, [[], []]);\n    this.patterns = matchSet.map((set, i) => {\n      return new pattern_js_1.Pattern(set, globParts[i], 0, this.platform);\n    });\n  }\n  async walk() {\n    // Walkers always return array of Path objects, so we just have to\n    // coerce them into the right shape.  It will have already called\n    // realpath() if the option was set to do so, so we know that's cached.\n    // start out knowing the cwd, at least\n    return [...(await new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,\n      platform: this.platform,\n      nocase: this.nocase\n    }).walk())];\n  }\n  walkSync() {\n    return [...new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,\n      platform: this.platform,\n      nocase: this.nocase\n    }).walkSync()];\n  }\n  stream() {\n    return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,\n      platform: this.platform,\n      nocase: this.nocase\n    }).stream();\n  }\n  streamSync() {\n    return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,\n      platform: this.platform,\n      nocase: this.nocase\n    }).streamSync();\n  }\n  /**\n   * Default sync iteration function. Returns a Generator that\n   * iterates over the results.\n   */\n  iterateSync() {\n    return this.streamSync()[Symbol.iterator]();\n  }\n  [Symbol.iterator]() {\n    return this.iterateSync();\n  }\n  /**\n   * Default async iteration function. Returns an AsyncGenerator that\n   * iterates over the results.\n   */\n  iterate() {\n    return this.stream()[Symbol.asyncIterator]();\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterate();\n  }\n}\nexports.Glob = Glob;","map":{"version":3,"names":["minimatch_1","require","path_scurry_1","url_1","pattern_js_1","walker_js_1","defaultPlatform","process","platform","Glob","absolute","cwd","root","dot","dotRelative","follow","ignore","magicalBraces","mark","matchBase","maxDepth","nobrace","nocase","nodir","noext","noglobstar","pattern","realpath","scurry","stat","signal","windowsPathsNoEscape","withFileTypes","opts","patterns","constructor","TypeError","URL","startsWith","fileURLToPath","Infinity","undefined","Error","allowWindowsEscape","map","p","replace","includes","Scurry","PathScurryWin32","PathScurryDarwin","PathScurryPosix","PathScurry","fs","nocaseMagicOnly","mmo","nocomment","nonegate","optimizationLevel","debug","mms","Minimatch","matchSet","globParts","reduce","set","m","push","i","Pattern","walk","GlobWalker","depth","walkSync","stream","GlobStream","streamSync","iterateSync","Symbol","iterator","iterate","asyncIterator","exports"],"sources":["C:\\Users\\david\\Documents\\ProyectoReact\\Backend\\node_modules\\express-handlebars\\node_modules\\glob\\src\\glob.ts"],"sourcesContent":["import { Minimatch, MinimatchOptions } from 'minimatch'\nimport { Minipass } from 'minipass'\nimport {\n  FSOption,\n  Path,\n  PathScurry,\n  PathScurryDarwin,\n  PathScurryPosix,\n  PathScurryWin32,\n} from 'path-scurry'\nimport { fileURLToPath } from 'url'\nimport { IgnoreLike } from './ignore.js'\nimport { Pattern } from './pattern.js'\nimport { GlobStream, GlobWalker } from './walker.js'\n\nexport type MatchSet = Minimatch['set']\nexport type GlobParts = Exclude<Minimatch['globParts'], undefined>\n\n// if no process global, just call it linux.\n// so we default to case-sensitive, / separators\nconst defaultPlatform: NodeJS.Platform =\n  typeof process === 'object' &&\n  process &&\n  typeof process.platform === 'string'\n    ? process.platform\n    : 'linux'\n\n/**\n * A `GlobOptions` object may be provided to any of the exported methods, and\n * must be provided to the `Glob` constructor.\n *\n * All options are optional, boolean, and false by default, unless otherwise\n * noted.\n *\n * All resolved options are added to the Glob object as properties.\n *\n * If you are running many `glob` operations, you can pass a Glob object as the\n * `options` argument to a subsequent operation to share the previously loaded\n * cache.\n */\nexport interface GlobOptions {\n  /**\n   * Set to `true` to always receive absolute paths for\n   * matched files. Set to `false` to always return relative paths.\n   *\n   * When this option is not set, absolute paths are returned for patterns\n   * that are absolute, and otherwise paths are returned that are relative\n   * to the `cwd` setting.\n   *\n   * This does _not_ make an extra system call to get\n   * the realpath, it only does string path resolution.\n   *\n   * Conflicts with {@link withFileTypes}\n   */\n  absolute?: boolean\n\n  /**\n   * Set to false to enable {@link windowsPathsNoEscape}\n   *\n   * @deprecated\n   */\n  allowWindowsEscape?: boolean\n\n  /**\n   * The current working directory in which to search. Defaults to\n   * `process.cwd()`.\n   *\n   * May be eiher a string path or a `file://` URL object or string.\n   */\n  cwd?: string | URL\n\n  /**\n   * Include `.dot` files in normal matches and `globstar`\n   * matches. Note that an explicit dot in a portion of the pattern\n   * will always match dot files.\n   */\n  dot?: boolean\n\n  /**\n   * Prepend all relative path strings with `./` (or `.\\` on Windows).\n   *\n   * Without this option, returned relative paths are \"bare\", so instead of\n   * returning `'./foo/bar'`, they are returned as `'foo/bar'`.\n   *\n   * Relative patterns starting with `'../'` are not prepended with `./`, even\n   * if this option is set.\n   */\n  dotRelative?: boolean\n\n  /**\n   * Follow symlinked directories when expanding `**`\n   * patterns. This can result in a lot of duplicate references in\n   * the presence of cyclic links, and make performance quite bad.\n   *\n   * By default, a `**` in a pattern will follow 1 symbolic link if\n   * it is not the first item in the pattern, or none if it is the\n   * first item in the pattern, following the same behavior as Bash.\n   */\n  follow?: boolean\n\n  /**\n   * string or string[], or an object with `ignore` and `ignoreChildren`\n   * methods.\n   *\n   * If a string or string[] is provided, then this is treated as a glob\n   * pattern or array of glob patterns to exclude from matches. To ignore all\n   * children within a directory, as well as the entry itself, append `'/**'`\n   * to the ignore pattern.\n   *\n   * **Note** `ignore` patterns are _always_ in `dot:true` mode, regardless of\n   * any other settings.\n   *\n   * If an object is provided that has `ignored(path)` and/or\n   * `childrenIgnored(path)` methods, then these methods will be called to\n   * determine whether any Path is a match or if its children should be\n   * traversed, respectively.\n   */\n  ignore?: string | string[] | IgnoreLike\n\n  /**\n   * Treat brace expansion like `{a,b}` as a \"magic\" pattern. Has no\n   * effect if {@link nobrace} is set.\n   *\n   * Only has effect on the {@link hasMagic} function.\n   */\n  magicalBraces?: boolean\n\n  /**\n   * Add a `/` character to directory matches. Note that this requires\n   * additional stat calls in some cases.\n   */\n  mark?: boolean\n\n  /**\n   * Perform a basename-only match if the pattern does not contain any slash\n   * characters. That is, `*.js` would be treated as equivalent to\n   * `**\\/*.js`, matching all js files in all directories.\n   */\n  matchBase?: boolean\n\n  /**\n   * Limit the directory traversal to a given depth below the cwd.\n   * Note that this does NOT prevent traversal to sibling folders,\n   * root patterns, and so on. It only limits the maximum folder depth\n   * that the walk will descend, relative to the cwd.\n   */\n  maxDepth?: number\n\n  /**\n   * Do not expand `{a,b}` and `{1..3}` brace sets.\n   */\n  nobrace?: boolean\n\n  /**\n   * Perform a case-insensitive match. This defaults to `true` on macOS and\n   * Windows systems, and `false` on all others.\n   *\n   * **Note** `nocase` should only be explicitly set when it is\n   * known that the filesystem's case sensitivity differs from the\n   * platform default. If set `true` on case-sensitive file\n   * systems, or `false` on case-insensitive file systems, then the\n   * walk may return more or less results than expected.\n   */\n  nocase?: boolean\n\n  /**\n   * Do not match directories, only files. (Note: to match\n   * _only_ directories, put a `/` at the end of the pattern.)\n   */\n  nodir?: boolean\n\n  /**\n   * Do not match \"extglob\" patterns such as `+(a|b)`.\n   */\n  noext?: boolean\n\n  /**\n   * Do not match `**` against multiple filenames. (Ie, treat it as a normal\n   * `*` instead.)\n   *\n   * Conflicts with {@link matchBase}\n   */\n  noglobstar?: boolean\n\n  /**\n   * Defaults to value of `process.platform` if available, or `'linux'` if\n   * not. Setting `platform:'win32'` on non-Windows systems may cause strange\n   * behavior.\n   */\n  platform?: NodeJS.Platform\n\n  /**\n   * Set to true to call `fs.realpath` on all of the\n   * results. In the case of an entry that cannot be resolved, the\n   * entry is omitted. This incurs a slight performance penalty, of\n   * course, because of the added system calls.\n   */\n  realpath?: boolean\n\n  /**\n   *\n   * A string path resolved against the `cwd` option, which\n   * is used as the starting point for absolute patterns that start\n   * with `/`, (but not drive letters or UNC paths on Windows).\n   *\n   * Note that this _doesn't_ necessarily limit the walk to the\n   * `root` directory, and doesn't affect the cwd starting point for\n   * non-absolute patterns. A pattern containing `..` will still be\n   * able to traverse out of the root directory, if it is not an\n   * actual root directory on the filesystem, and any non-absolute\n   * patterns will be matched in the `cwd`. For example, the\n   * pattern `/../*` with `{root:'/some/path'}` will return all\n   * files in `/some`, not all files in `/some/path`. The pattern\n   * `*` with `{root:'/some/path'}` will return all the entries in\n   * the cwd, not the entries in `/some/path`.\n   *\n   * To start absolute and non-absolute patterns in the same\n   * path, you can use `{root:''}`. However, be aware that on\n   * Windows systems, a pattern like `x:/*` or `//host/share/*` will\n   * _always_ start in the `x:/` or `//host/share` directory,\n   * regardless of the `root` setting.\n   */\n  root?: string\n\n  /**\n   * A [PathScurry](http://npm.im/path-scurry) object used\n   * to traverse the file system. If the `nocase` option is set\n   * explicitly, then any provided `scurry` object must match this\n   * setting.\n   */\n  scurry?: PathScurry\n\n  /**\n   * Call `lstat()` on all entries, whether required or not to determine\n   * if it's a valid match. When used with {@link withFileTypes}, this means\n   * that matches will include data such as modified time, permissions, and\n   * so on.  Note that this will incur a performance cost due to the added\n   * system calls.\n   */\n  stat?: boolean\n\n  /**\n   * An AbortSignal which will cancel the Glob walk when\n   * triggered.\n   */\n  signal?: AbortSignal\n\n  /**\n   * Use `\\\\` as a path separator _only_, and\n   *  _never_ as an escape character. If set, all `\\\\` characters are\n   *  replaced with `/` in the pattern.\n   *\n   *  Note that this makes it **impossible** to match against paths\n   *  containing literal glob pattern characters, but allows matching\n   *  with patterns constructed using `path.join()` and\n   *  `path.resolve()` on Windows platforms, mimicking the (buggy!)\n   *  behavior of Glob v7 and before on Windows. Please use with\n   *  caution, and be mindful of [the caveat below about Windows\n   *  paths](#windows). (For legacy reasons, this is also set if\n   *  `allowWindowsEscape` is set to the exact value `false`.)\n   */\n  windowsPathsNoEscape?: boolean\n\n  /**\n   * Return [PathScurry](http://npm.im/path-scurry)\n   * `Path` objects instead of strings. These are similar to a\n   * NodeJS `Dirent` object, but with additional methods and\n   * properties.\n   *\n   * Conflicts with {@link absolute}\n   */\n  withFileTypes?: boolean\n\n  /**\n   * An fs implementation to override some or all of the defaults.  See\n   * http://npm.im/path-scurry for details about what can be overridden.\n   */\n  fs?: FSOption\n\n  /**\n   * Just passed along to Minimatch.  Note that this makes all pattern\n   * matching operations slower and *extremely* noisy.\n   */\n  debug?: boolean\n\n  /**\n   * Return `/` delimited paths, even on Windows.\n   *\n   * On posix systems, this has no effect.  But, on Windows, it means that\n   * paths will be `/` delimited, and absolute paths will be their full\n   * resolved UNC forms, eg instead of `'C:\\\\foo\\\\bar'`, it would return\n   * `'//?/C:/foo/bar'`\n   */\n  posix?: boolean\n}\n\nexport type GlobOptionsWithFileTypesTrue = GlobOptions & {\n  withFileTypes: true\n  // string options not relevant if returning Path objects.\n  absolute?: undefined\n  mark?: undefined\n  posix?: undefined\n}\n\nexport type GlobOptionsWithFileTypesFalse = GlobOptions & {\n  withFileTypes?: false\n}\n\nexport type GlobOptionsWithFileTypesUnset = GlobOptions & {\n  withFileTypes?: undefined\n}\n\nexport type Result<Opts> = Opts extends GlobOptionsWithFileTypesTrue\n  ? Path\n  : Opts extends GlobOptionsWithFileTypesFalse\n  ? string\n  : Opts extends GlobOptionsWithFileTypesUnset\n  ? string\n  : string | Path\nexport type Results<Opts> = Result<Opts>[]\n\nexport type FileTypes<Opts> = Opts extends GlobOptionsWithFileTypesTrue\n  ? true\n  : Opts extends GlobOptionsWithFileTypesFalse\n  ? false\n  : Opts extends GlobOptionsWithFileTypesUnset\n  ? false\n  : boolean\n\n/**\n * An object that can perform glob pattern traversals.\n */\nexport class Glob<Opts extends GlobOptions> implements GlobOptions {\n  absolute?: boolean\n  cwd: string\n  root?: string\n  dot: boolean\n  dotRelative: boolean\n  follow: boolean\n  ignore?: string | string[] | IgnoreLike\n  magicalBraces: boolean\n  mark?: boolean\n  matchBase: boolean\n  maxDepth: number\n  nobrace: boolean\n  nocase: boolean\n  nodir: boolean\n  noext: boolean\n  noglobstar: boolean\n  pattern: string[]\n  platform: NodeJS.Platform\n  realpath: boolean\n  scurry: PathScurry\n  stat: boolean\n  signal?: AbortSignal\n  windowsPathsNoEscape: boolean\n  withFileTypes: FileTypes<Opts>\n\n  /**\n   * The options provided to the constructor.\n   */\n  opts: Opts\n\n  /**\n   * An array of parsed immutable {@link Pattern} objects.\n   */\n  patterns: Pattern[]\n\n  /**\n   * All options are stored as properties on the `Glob` object.\n   *\n   * See {@link GlobOptions} for full options descriptions.\n   *\n   * Note that a previous `Glob` object can be passed as the\n   * `GlobOptions` to another `Glob` instantiation to re-use settings\n   * and caches with a new pattern.\n   *\n   * Traversal functions can be called multiple times to run the walk\n   * again.\n   */\n  constructor(pattern: string | string[], opts: Opts) {\n    /* c8 ignore start */\n    if (!opts) throw new TypeError('glob options required')\n    /* c8 ignore stop */\n    this.withFileTypes = !!opts.withFileTypes as FileTypes<Opts>\n    this.signal = opts.signal\n    this.follow = !!opts.follow\n    this.dot = !!opts.dot\n    this.dotRelative = !!opts.dotRelative\n    this.nodir = !!opts.nodir\n    this.mark = !!opts.mark\n    if (!opts.cwd) {\n      this.cwd = ''\n    } else if (opts.cwd instanceof URL || opts.cwd.startsWith('file://')) {\n      opts.cwd = fileURLToPath(opts.cwd)\n    }\n    this.cwd = opts.cwd || ''\n    this.root = opts.root\n    this.magicalBraces = !!opts.magicalBraces\n    this.nobrace = !!opts.nobrace\n    this.noext = !!opts.noext\n    this.realpath = !!opts.realpath\n    this.absolute = opts.absolute\n\n    this.noglobstar = !!opts.noglobstar\n    this.matchBase = !!opts.matchBase\n    this.maxDepth =\n      typeof opts.maxDepth === 'number' ? opts.maxDepth : Infinity\n    this.stat = !!opts.stat\n    this.ignore = opts.ignore\n\n    if (this.withFileTypes && this.absolute !== undefined) {\n      throw new Error('cannot set absolute and withFileTypes:true')\n    }\n\n    if (typeof pattern === 'string') {\n      pattern = [pattern]\n    }\n\n    this.windowsPathsNoEscape =\n      !!opts.windowsPathsNoEscape ||\n      (opts as GlobOptions).allowWindowsEscape === false\n\n    if (this.windowsPathsNoEscape) {\n      pattern = pattern.map(p => p.replace(/\\\\/g, '/'))\n    }\n\n    if (this.matchBase) {\n      if (opts.noglobstar) {\n        throw new TypeError('base matching requires globstar')\n      }\n      pattern = pattern.map(p => (p.includes('/') ? p : `./**/${p}`))\n    }\n\n    this.pattern = pattern\n\n    this.platform = opts.platform || defaultPlatform\n    this.opts = { ...opts, platform: this.platform }\n    if (opts.scurry) {\n      this.scurry = opts.scurry\n      if (\n        opts.nocase !== undefined &&\n        opts.nocase !== opts.scurry.nocase\n      ) {\n        throw new Error('nocase option contradicts provided scurry option')\n      }\n    } else {\n      const Scurry =\n        opts.platform === 'win32'\n          ? PathScurryWin32\n          : opts.platform === 'darwin'\n          ? PathScurryDarwin\n          : opts.platform\n          ? PathScurryPosix\n          : PathScurry\n      this.scurry = new Scurry(this.cwd, {\n        nocase: opts.nocase,\n        fs: opts.fs,\n      })\n    }\n    this.nocase = this.scurry.nocase\n\n    // If you do nocase:true on a case-sensitive file system, then\n    // we need to use regexps instead of strings for non-magic\n    // path portions, because statting `aBc` won't return results\n    // for the file `AbC` for example.\n    const nocaseMagicOnly =\n      this.platform === 'darwin' || this.platform === 'win32'\n\n    const mmo: MinimatchOptions = {\n      // default nocase based on platform\n      ...opts,\n      dot: this.dot,\n      matchBase: this.matchBase,\n      nobrace: this.nobrace,\n      nocase: this.nocase,\n      nocaseMagicOnly,\n      nocomment: true,\n      noext: this.noext,\n      nonegate: true,\n      optimizationLevel: 2,\n      platform: this.platform,\n      windowsPathsNoEscape: this.windowsPathsNoEscape,\n      debug: !!this.opts.debug,\n    }\n\n    const mms = this.pattern.map(p => new Minimatch(p, mmo))\n    const [matchSet, globParts] = mms.reduce(\n      (set: [MatchSet, GlobParts], m) => {\n        set[0].push(...m.set)\n        set[1].push(...m.globParts)\n        return set\n      },\n      [[], []]\n    )\n    this.patterns = matchSet.map((set, i) => {\n      return new Pattern(set, globParts[i], 0, this.platform)\n    })\n  }\n\n  /**\n   * Returns a Promise that resolves to the results array.\n   */\n  async walk(): Promise<Results<Opts>>\n  async walk(): Promise<(string | Path)[]> {\n    // Walkers always return array of Path objects, so we just have to\n    // coerce them into the right shape.  It will have already called\n    // realpath() if the option was set to do so, so we know that's cached.\n    // start out knowing the cwd, at least\n    return [\n      ...(await new GlobWalker(this.patterns, this.scurry.cwd, {\n        ...this.opts,\n        maxDepth:\n          this.maxDepth !== Infinity\n            ? this.maxDepth + this.scurry.cwd.depth()\n            : Infinity,\n        platform: this.platform,\n        nocase: this.nocase,\n      }).walk()),\n    ]\n  }\n\n  /**\n   * synchronous {@link Glob.walk}\n   */\n  walkSync(): Results<Opts>\n  walkSync(): (string | Path)[] {\n    return [\n      ...new GlobWalker(this.patterns, this.scurry.cwd, {\n        ...this.opts,\n        maxDepth:\n          this.maxDepth !== Infinity\n            ? this.maxDepth + this.scurry.cwd.depth()\n            : Infinity,\n        platform: this.platform,\n        nocase: this.nocase,\n      }).walkSync(),\n    ]\n  }\n\n  /**\n   * Stream results asynchronously.\n   */\n  stream(): Minipass<Result<Opts>, Result<Opts>>\n  stream(): Minipass<string | Path, string | Path> {\n    return new GlobStream(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth:\n        this.maxDepth !== Infinity\n          ? this.maxDepth + this.scurry.cwd.depth()\n          : Infinity,\n      platform: this.platform,\n      nocase: this.nocase,\n    }).stream()\n  }\n\n  /**\n   * Stream results synchronously.\n   */\n  streamSync(): Minipass<Result<Opts>, Result<Opts>>\n  streamSync(): Minipass<string | Path, string | Path> {\n    return new GlobStream(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth:\n        this.maxDepth !== Infinity\n          ? this.maxDepth + this.scurry.cwd.depth()\n          : Infinity,\n      platform: this.platform,\n      nocase: this.nocase,\n    }).streamSync()\n  }\n\n  /**\n   * Default sync iteration function. Returns a Generator that\n   * iterates over the results.\n   */\n  iterateSync(): Generator<Result<Opts>, void, void> {\n    return this.streamSync()[Symbol.iterator]()\n  }\n  [Symbol.iterator]() {\n    return this.iterateSync()\n  }\n\n  /**\n   * Default async iteration function. Returns an AsyncGenerator that\n   * iterates over the results.\n   */\n  iterate(): AsyncGenerator<Result<Opts>, void, void> {\n    return this.stream()[Symbol.asyncIterator]()\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterate()\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,aAAA,GAAAD,OAAA;AAQA,MAAAE,KAAA,GAAAF,OAAA;AAEA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,WAAA,GAAAJ,OAAA;AAKA;AACA;AACA,MAAMK,eAAe,GACnB,OAAOC,OAAO,KAAK,QAAQ,IAC3BA,OAAO,IACP,OAAOA,OAAO,CAACC,QAAQ,KAAK,QAAQ,GAChCD,OAAO,CAACC,QAAQ,GAChB,OAAO;AAgTb;;;AAGA,MAAaC,IAAI;EACfC,QAAQ;EACRC,GAAG;EACHC,IAAI;EACJC,GAAG;EACHC,WAAW;EACXC,MAAM;EACNC,MAAM;EACNC,aAAa;EACbC,IAAI;EACJC,SAAS;EACTC,QAAQ;EACRC,OAAO;EACPC,MAAM;EACNC,KAAK;EACLC,KAAK;EACLC,UAAU;EACVC,OAAO;EACPlB,QAAQ;EACRmB,QAAQ;EACRC,MAAM;EACNC,IAAI;EACJC,MAAM;EACNC,oBAAoB;EACpBC,aAAa;EAEb;;;EAGAC,IAAI;EAEJ;;;EAGAC,QAAQ;EAER;;;;;;;;;;;;EAYAC,YAAYT,OAA0B,EAAEO,IAAU;IAChD;IACA,IAAI,CAACA,IAAI,EAAE,MAAM,IAAIG,SAAS,CAAC,uBAAuB,CAAC;IACvD;IACA,IAAI,CAACJ,aAAa,GAAG,CAAC,CAACC,IAAI,CAACD,aAAgC;IAC5D,IAAI,CAACF,MAAM,GAAGG,IAAI,CAACH,MAAM;IACzB,IAAI,CAACf,MAAM,GAAG,CAAC,CAACkB,IAAI,CAAClB,MAAM;IAC3B,IAAI,CAACF,GAAG,GAAG,CAAC,CAACoB,IAAI,CAACpB,GAAG;IACrB,IAAI,CAACC,WAAW,GAAG,CAAC,CAACmB,IAAI,CAACnB,WAAW;IACrC,IAAI,CAACS,KAAK,GAAG,CAAC,CAACU,IAAI,CAACV,KAAK;IACzB,IAAI,CAACL,IAAI,GAAG,CAAC,CAACe,IAAI,CAACf,IAAI;IACvB,IAAI,CAACe,IAAI,CAACtB,GAAG,EAAE;MACb,IAAI,CAACA,GAAG,GAAG,EAAE;KACd,MAAM,IAAIsB,IAAI,CAACtB,GAAG,YAAY0B,GAAG,IAAIJ,IAAI,CAACtB,GAAG,CAAC2B,UAAU,CAAC,SAAS,CAAC,EAAE;MACpEL,IAAI,CAACtB,GAAG,GAAG,IAAAR,KAAA,CAAAoC,aAAa,EAACN,IAAI,CAACtB,GAAG,CAAC;;IAEpC,IAAI,CAACA,GAAG,GAAGsB,IAAI,CAACtB,GAAG,IAAI,EAAE;IACzB,IAAI,CAACC,IAAI,GAAGqB,IAAI,CAACrB,IAAI;IACrB,IAAI,CAACK,aAAa,GAAG,CAAC,CAACgB,IAAI,CAAChB,aAAa;IACzC,IAAI,CAACI,OAAO,GAAG,CAAC,CAACY,IAAI,CAACZ,OAAO;IAC7B,IAAI,CAACG,KAAK,GAAG,CAAC,CAACS,IAAI,CAACT,KAAK;IACzB,IAAI,CAACG,QAAQ,GAAG,CAAC,CAACM,IAAI,CAACN,QAAQ;IAC/B,IAAI,CAACjB,QAAQ,GAAGuB,IAAI,CAACvB,QAAQ;IAE7B,IAAI,CAACe,UAAU,GAAG,CAAC,CAACQ,IAAI,CAACR,UAAU;IACnC,IAAI,CAACN,SAAS,GAAG,CAAC,CAACc,IAAI,CAACd,SAAS;IACjC,IAAI,CAACC,QAAQ,GACX,OAAOa,IAAI,CAACb,QAAQ,KAAK,QAAQ,GAAGa,IAAI,CAACb,QAAQ,GAAGoB,QAAQ;IAC9D,IAAI,CAACX,IAAI,GAAG,CAAC,CAACI,IAAI,CAACJ,IAAI;IACvB,IAAI,CAACb,MAAM,GAAGiB,IAAI,CAACjB,MAAM;IAEzB,IAAI,IAAI,CAACgB,aAAa,IAAI,IAAI,CAACtB,QAAQ,KAAK+B,SAAS,EAAE;MACrD,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;;IAG/D,IAAI,OAAOhB,OAAO,KAAK,QAAQ,EAAE;MAC/BA,OAAO,GAAG,CAACA,OAAO,CAAC;;IAGrB,IAAI,CAACK,oBAAoB,GACvB,CAAC,CAACE,IAAI,CAACF,oBAAoB,IAC1BE,IAAoB,CAACU,kBAAkB,KAAK,KAAK;IAEpD,IAAI,IAAI,CAACZ,oBAAoB,EAAE;MAC7BL,OAAO,GAAGA,OAAO,CAACkB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;IAGnD,IAAI,IAAI,CAAC3B,SAAS,EAAE;MAClB,IAAIc,IAAI,CAACR,UAAU,EAAE;QACnB,MAAM,IAAIW,SAAS,CAAC,iCAAiC,CAAC;;MAExDV,OAAO,GAAGA,OAAO,CAACkB,GAAG,CAACC,CAAC,IAAKA,CAAC,CAACE,QAAQ,CAAC,GAAG,CAAC,GAAGF,CAAC,GAAG,QAAQA,CAAC,EAAG,CAAC;;IAGjE,IAAI,CAACnB,OAAO,GAAGA,OAAO;IAEtB,IAAI,CAAClB,QAAQ,GAAGyB,IAAI,CAACzB,QAAQ,IAAIF,eAAe;IAChD,IAAI,CAAC2B,IAAI,GAAG;MAAE,GAAGA,IAAI;MAAEzB,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE;IAChD,IAAIyB,IAAI,CAACL,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,GAAGK,IAAI,CAACL,MAAM;MACzB,IACEK,IAAI,CAACX,MAAM,KAAKmB,SAAS,IACzBR,IAAI,CAACX,MAAM,KAAKW,IAAI,CAACL,MAAM,CAACN,MAAM,EAClC;QACA,MAAM,IAAIoB,KAAK,CAAC,kDAAkD,CAAC;;KAEtE,MAAM;MACL,MAAMM,MAAM,GACVf,IAAI,CAACzB,QAAQ,KAAK,OAAO,GACrBN,aAAA,CAAA+C,eAAe,GACfhB,IAAI,CAACzB,QAAQ,KAAK,QAAQ,GAC1BN,aAAA,CAAAgD,gBAAgB,GAChBjB,IAAI,CAACzB,QAAQ,GACbN,aAAA,CAAAiD,eAAe,GACfjD,aAAA,CAAAkD,UAAU;MAChB,IAAI,CAACxB,MAAM,GAAG,IAAIoB,MAAM,CAAC,IAAI,CAACrC,GAAG,EAAE;QACjCW,MAAM,EAAEW,IAAI,CAACX,MAAM;QACnB+B,EAAE,EAAEpB,IAAI,CAACoB;OACV,CAAC;;IAEJ,IAAI,CAAC/B,MAAM,GAAG,IAAI,CAACM,MAAM,CAACN,MAAM;IAEhC;IACA;IACA;IACA;IACA,MAAMgC,eAAe,GACnB,IAAI,CAAC9C,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAACA,QAAQ,KAAK,OAAO;IAEzD,MAAM+C,GAAG,GAAqB;MAC5B;MACA,GAAGtB,IAAI;MACPpB,GAAG,EAAE,IAAI,CAACA,GAAG;MACbM,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBE,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBgC,eAAe;MACfE,SAAS,EAAE,IAAI;MACfhC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBiC,QAAQ,EAAE,IAAI;MACdC,iBAAiB,EAAE,CAAC;MACpBlD,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBuB,oBAAoB,EAAE,IAAI,CAACA,oBAAoB;MAC/C4B,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC1B,IAAI,CAAC0B;KACpB;IAED,MAAMC,GAAG,GAAG,IAAI,CAAClC,OAAO,CAACkB,GAAG,CAACC,CAAC,IAAI,IAAI7C,WAAA,CAAA6D,SAAS,CAAChB,CAAC,EAAEU,GAAG,CAAC,CAAC;IACxD,MAAM,CAACO,QAAQ,EAAEC,SAAS,CAAC,GAAGH,GAAG,CAACI,MAAM,CACtC,CAACC,GAA0B,EAAEC,CAAC,KAAI;MAChCD,GAAG,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,GAAGD,CAAC,CAACD,GAAG,CAAC;MACrBA,GAAG,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,GAAGD,CAAC,CAACH,SAAS,CAAC;MAC3B,OAAOE,GAAG;IACZ,CAAC,EACD,CAAC,EAAE,EAAE,EAAE,CAAC,CACT;IACD,IAAI,CAAC/B,QAAQ,GAAG4B,QAAQ,CAAClB,GAAG,CAAC,CAACqB,GAAG,EAAEG,CAAC,KAAI;MACtC,OAAO,IAAIhE,YAAA,CAAAiE,OAAO,CAACJ,GAAG,EAAEF,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC5D,QAAQ,CAAC;IACzD,CAAC,CAAC;EACJ;EAMA,MAAM8D,IAAIA,CAAA;IACR;IACA;IACA;IACA;IACA,OAAO,CACL,IAAI,MAAM,IAAIjE,WAAA,CAAAkE,UAAU,CAAC,IAAI,CAACrC,QAAQ,EAAE,IAAI,CAACN,MAAM,CAACjB,GAAG,EAAE;MACvD,GAAG,IAAI,CAACsB,IAAI;MACZb,QAAQ,EACN,IAAI,CAACA,QAAQ,KAAKoB,QAAQ,GACtB,IAAI,CAACpB,QAAQ,GAAG,IAAI,CAACQ,MAAM,CAACjB,GAAG,CAAC6D,KAAK,EAAE,GACvChC,QAAQ;MACdhC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBc,MAAM,EAAE,IAAI,CAACA;KACd,CAAC,CAACgD,IAAI,EAAE,CAAC,CACX;EACH;EAMAG,QAAQA,CAAA;IACN,OAAO,CACL,GAAG,IAAIpE,WAAA,CAAAkE,UAAU,CAAC,IAAI,CAACrC,QAAQ,EAAE,IAAI,CAACN,MAAM,CAACjB,GAAG,EAAE;MAChD,GAAG,IAAI,CAACsB,IAAI;MACZb,QAAQ,EACN,IAAI,CAACA,QAAQ,KAAKoB,QAAQ,GACtB,IAAI,CAACpB,QAAQ,GAAG,IAAI,CAACQ,MAAM,CAACjB,GAAG,CAAC6D,KAAK,EAAE,GACvChC,QAAQ;MACdhC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBc,MAAM,EAAE,IAAI,CAACA;KACd,CAAC,CAACmD,QAAQ,EAAE,CACd;EACH;EAMAC,MAAMA,CAAA;IACJ,OAAO,IAAIrE,WAAA,CAAAsE,UAAU,CAAC,IAAI,CAACzC,QAAQ,EAAE,IAAI,CAACN,MAAM,CAACjB,GAAG,EAAE;MACpD,GAAG,IAAI,CAACsB,IAAI;MACZb,QAAQ,EACN,IAAI,CAACA,QAAQ,KAAKoB,QAAQ,GACtB,IAAI,CAACpB,QAAQ,GAAG,IAAI,CAACQ,MAAM,CAACjB,GAAG,CAAC6D,KAAK,EAAE,GACvChC,QAAQ;MACdhC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBc,MAAM,EAAE,IAAI,CAACA;KACd,CAAC,CAACoD,MAAM,EAAE;EACb;EAMAE,UAAUA,CAAA;IACR,OAAO,IAAIvE,WAAA,CAAAsE,UAAU,CAAC,IAAI,CAACzC,QAAQ,EAAE,IAAI,CAACN,MAAM,CAACjB,GAAG,EAAE;MACpD,GAAG,IAAI,CAACsB,IAAI;MACZb,QAAQ,EACN,IAAI,CAACA,QAAQ,KAAKoB,QAAQ,GACtB,IAAI,CAACpB,QAAQ,GAAG,IAAI,CAACQ,MAAM,CAACjB,GAAG,CAAC6D,KAAK,EAAE,GACvChC,QAAQ;MACdhC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBc,MAAM,EAAE,IAAI,CAACA;KACd,CAAC,CAACsD,UAAU,EAAE;EACjB;EAEA;;;;EAIAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACD,UAAU,EAAE,CAACE,MAAM,CAACC,QAAQ,CAAC,EAAE;EAC7C;EACA,CAACD,MAAM,CAACC,QAAQ,IAAC;IACf,OAAO,IAAI,CAACF,WAAW,EAAE;EAC3B;EAEA;;;;EAIAG,OAAOA,CAAA;IACL,OAAO,IAAI,CAACN,MAAM,EAAE,CAACI,MAAM,CAACG,aAAa,CAAC,EAAE;EAC9C;EACA,CAACH,MAAM,CAACG,aAAa,IAAC;IACpB,OAAO,IAAI,CAACD,OAAO,EAAE;EACvB;;AApQFE,OAAA,CAAAzE,IAAA,GAAAA,IAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}