{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright (c) 2015, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst Handlebars = require(\"handlebars\");\nconst fs = require(\"graceful-fs\");\nconst path = require(\"node:path\");\nconst node_util_1 = require(\"node:util\");\nconst glob_1 = require(\"glob\");\nconst readFile = (0, node_util_1.promisify)(fs.readFile);\n// -----------------------------------------------------------------------------\nconst defaultConfig = {\n  handlebars: Handlebars,\n  extname: \".handlebars\",\n  encoding: \"utf8\",\n  layoutsDir: undefined,\n  partialsDir: undefined,\n  defaultLayout: \"main\",\n  helpers: undefined,\n  compilerOptions: undefined,\n  runtimeOptions: undefined\n};\nclass ExpressHandlebars {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Config properties with defaults.\n    Object.assign(this, defaultConfig, config);\n    // save given config to override other settings.\n    this.config = config;\n    // Express view engine integration point.\n    this.engine = this.renderView.bind(this);\n    // Normalize `extname`.\n    if (this.extname.charAt(0) !== \".\") {\n      this.extname = \".\" + this.extname;\n    }\n    // Internal caches of compiled and precompiled templates.\n    this.compiled = {};\n    this.precompiled = {};\n    // Private internal file system cache.\n    this._fsCache = {};\n  }\n  getPartials() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof this.partialsDir === \"undefined\") {\n        return {};\n      }\n      const partialsDirs = Array.isArray(this.partialsDir) ? this.partialsDir : [this.partialsDir];\n      const dirs = yield Promise.all(partialsDirs.map(dir => __awaiter(this, void 0, void 0, function* () {\n        let dirPath;\n        let dirTemplates;\n        let dirNamespace;\n        let dirRename;\n        // Support `partialsDir` collection with object entries that contain a\n        // templates promise and a namespace.\n        if (typeof dir === \"string\") {\n          dirPath = dir;\n        } else if (typeof dir === \"object\") {\n          dirTemplates = dir.templates;\n          dirNamespace = dir.namespace;\n          dirRename = dir.rename;\n          dirPath = dir.dir;\n        }\n        // We must have some path to templates, or templates themselves.\n        if (!dirPath && !dirTemplates) {\n          throw new Error(\"A partials dir must be a string or config object\");\n        }\n        const templates = dirTemplates || (yield this.getTemplates(dirPath, options));\n        return {\n          templates: templates,\n          namespace: dirNamespace,\n          rename: dirRename\n        };\n      })));\n      const partials = {};\n      for (const dir of dirs) {\n        const {\n          templates,\n          namespace,\n          rename\n        } = dir;\n        const filePaths = Object.keys(templates);\n        const getTemplateNameFn = typeof rename === \"function\" ? rename : this._getTemplateName.bind(this);\n        for (const filePath of filePaths) {\n          const partialName = getTemplateNameFn(filePath, namespace);\n          partials[partialName] = templates[filePath];\n        }\n      }\n      return partials;\n    });\n  }\n  getTemplate(filePath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      filePath = path.resolve(filePath);\n      const encoding = options.encoding || this.encoding;\n      const cache = options.precompiled ? this.precompiled : this.compiled;\n      const template = options.cache && cache[filePath];\n      if (template) {\n        return template;\n      }\n      // Optimistically cache template promise to reduce file system I/O, but\n      // remove from cache if there was a problem.\n      try {\n        cache[filePath] = this._getFile(filePath, {\n          cache: options.cache,\n          encoding\n        }).then(file => {\n          const compileTemplate = (options.precompiled ? this._precompileTemplate : this._compileTemplate).bind(this);\n          return compileTemplate(file, this.compilerOptions);\n        });\n        return yield cache[filePath];\n      } catch (err) {\n        delete cache[filePath];\n        throw err;\n      }\n    });\n  }\n  getTemplates(dirPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      const cache = options.cache;\n      const filePaths = yield this._getDir(dirPath, {\n        cache\n      });\n      const templates = yield Promise.all(filePaths.map(filePath => {\n        return this.getTemplate(path.join(dirPath, filePath), options);\n      }));\n      const hash = {};\n      for (let i = 0; i < filePaths.length; i++) {\n        hash[filePaths[i]] = templates[i];\n      }\n      return hash;\n    });\n  }\n  render(filePath) {\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      const encoding = options.encoding || this.encoding;\n      const [template, partials] = yield Promise.all([this.getTemplate(filePath, {\n        cache: options.cache,\n        encoding\n      }), options.partials || this.getPartials({\n        cache: options.cache,\n        encoding\n      })]);\n      const helpers = Object.assign(Object.assign({}, this.helpers), options.helpers);\n      const runtimeOptions = Object.assign(Object.assign({}, this.runtimeOptions), options.runtimeOptions);\n      // Add ExpressHandlebars metadata to the data channel so that it's\n      // accessible within the templates and helpers, namespaced under:\n      // `@exphbs.*`\n      const data = Object.assign(Object.assign({}, options.data), {\n        exphbs: Object.assign(Object.assign({}, options), {\n          filePath,\n          helpers,\n          partials,\n          runtimeOptions\n        })\n      });\n      const html = this._renderTemplate(template, context, Object.assign(Object.assign({}, runtimeOptions), {\n        data,\n        helpers,\n        partials\n      }));\n      return html;\n    });\n  }\n  renderView(viewPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n      }\n      const context = options;\n      let promise = null;\n      if (!callback) {\n        promise = new Promise((resolve, reject) => {\n          callback = (err, value) => {\n            err !== null ? reject(err) : resolve(value);\n          };\n        });\n      }\n      // Express provides `settings.views` which is the path to the views dir that\n      // the developer set on the Express app. When this value exists, it's used\n      // to compute the view's name. Layouts and Partials directories are relative\n      // to `settings.view` path\n      let view;\n      const views = options.settings && options.settings.views;\n      const viewsPath = this._resolveViewsPath(views, viewPath);\n      if (viewsPath) {\n        view = this._getTemplateName(path.relative(viewsPath, viewPath));\n        this.partialsDir = this.config.partialsDir || path.join(viewsPath, \"partials/\");\n        this.layoutsDir = this.config.layoutsDir || path.join(viewsPath, \"layouts/\");\n      }\n      const encoding = options.encoding || this.encoding;\n      // Merge render-level and instance-level helpers together.\n      const helpers = Object.assign(Object.assign({}, this.helpers), options.helpers);\n      // Merge render-level and instance-level partials together.\n      const partials = Object.assign(Object.assign({}, yield this.getPartials({\n        cache: options.cache,\n        encoding\n      })), options.partials || {});\n      // Pluck-out ExpressHandlebars-specific options and Handlebars-specific\n      // rendering options.\n      const renderOptions = {\n        cache: options.cache,\n        encoding,\n        view,\n        layout: \"layout\" in options ? options.layout : this.defaultLayout,\n        data: options.data,\n        helpers,\n        partials,\n        runtimeOptions: options.runtimeOptions\n      };\n      try {\n        let html = yield this.render(viewPath, context, renderOptions);\n        const layoutPath = this._resolveLayoutPath(renderOptions.layout);\n        if (layoutPath) {\n          html = yield this.render(layoutPath, Object.assign(Object.assign({}, context), {\n            body: html\n          }), Object.assign(Object.assign({}, renderOptions), {\n            layout: undefined\n          }));\n        }\n        callback(null, html);\n      } catch (err) {\n        callback(err);\n      }\n      return promise;\n    });\n  }\n  resetCache(filePathsOrFilter) {\n    let filePaths = [];\n    if (typeof filePathsOrFilter === \"undefined\") {\n      filePaths = Object.keys(this._fsCache);\n    } else if (typeof filePathsOrFilter === \"string\") {\n      filePaths = [filePathsOrFilter];\n    } else if (typeof filePathsOrFilter === \"function\") {\n      filePaths = Object.keys(this._fsCache).filter(filePathsOrFilter);\n    } else if (Array.isArray(filePathsOrFilter)) {\n      filePaths = filePathsOrFilter;\n    }\n    for (const filePath of filePaths) {\n      delete this._fsCache[filePath];\n    }\n  }\n  // -- Protected Hooks ----------------------------------------------------------\n  _compileTemplate(template) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.handlebars.compile(template.trim(), options);\n  }\n  _precompileTemplate(template) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.handlebars.precompile(template.trim(), options);\n  }\n  _renderTemplate(template) {\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return template(context, options).trim();\n  }\n  // -- Private ------------------------------------------------------------------\n  _getDir(dirPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      dirPath = path.resolve(dirPath);\n      const cache = this._fsCache;\n      let dir = options.cache && cache[dirPath];\n      if (dir) {\n        return [...(yield dir)];\n      }\n      const pattern = \"**/*\" + this.extname;\n      // Optimistically cache dir promise to reduce file system I/O, but remove\n      // from cache if there was a problem.\n      try {\n        dir = cache[dirPath] = (0, glob_1.glob)(pattern, {\n          cwd: dirPath,\n          follow: true,\n          posix: true\n        });\n        // @ts-expect-error FIXME: not sure how to throw error in glob for test coverage\n        if (options._throwTestError) {\n          throw new Error(\"test\");\n        }\n        return [...(yield dir)];\n      } catch (err) {\n        delete cache[dirPath];\n        throw err;\n      }\n    });\n  }\n  _getFile(filePath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      filePath = path.resolve(filePath);\n      const cache = this._fsCache;\n      const encoding = options.encoding || this.encoding;\n      const file = options.cache && cache[filePath];\n      if (file) {\n        return file;\n      }\n      // Optimistically cache file promise to reduce file system I/O, but remove\n      // from cache if there was a problem.\n      try {\n        cache[filePath] = readFile(filePath, {\n          encoding: encoding || \"utf8\"\n        });\n        return yield cache[filePath];\n      } catch (err) {\n        delete cache[filePath];\n        throw err;\n      }\n    });\n  }\n  _getTemplateName(filePath) {\n    let namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let name = filePath;\n    if (name.endsWith(this.extname)) {\n      name = name.substring(0, name.length - this.extname.length);\n    }\n    if (namespace) {\n      name = namespace + \"/\" + name;\n    }\n    return name;\n  }\n  _resolveViewsPath(views, file) {\n    if (!Array.isArray(views)) {\n      return views;\n    }\n    let lastDir = path.resolve(file);\n    let dir = path.dirname(lastDir);\n    const absoluteViews = views.map(v => path.resolve(v));\n    // find the closest parent\n    while (dir !== lastDir) {\n      const index = absoluteViews.indexOf(dir);\n      if (index >= 0) {\n        return views[index];\n      }\n      lastDir = dir;\n      dir = path.dirname(lastDir);\n    }\n    // cannot resolve view\n    return null;\n  }\n  _resolveLayoutPath(layoutPath) {\n    if (!layoutPath) {\n      return null;\n    }\n    if (!path.extname(layoutPath)) {\n      layoutPath += this.extname;\n    }\n    return path.resolve(this.layoutsDir || \"\", layoutPath);\n  }\n}\nexports.default = ExpressHandlebars;","map":{"version":3,"names":["Handlebars","require","fs","path","node_util_1","glob_1","readFile","promisify","defaultConfig","handlebars","extname","encoding","layoutsDir","undefined","partialsDir","defaultLayout","helpers","compilerOptions","runtimeOptions","ExpressHandlebars","constructor","config","arguments","length","Object","assign","engine","renderView","bind","charAt","compiled","precompiled","_fsCache","getPartials","options","partialsDirs","Array","isArray","dirs","Promise","all","map","dir","__awaiter","dirPath","dirTemplates","dirNamespace","dirRename","templates","namespace","rename","Error","getTemplates","partials","filePaths","keys","getTemplateNameFn","_getTemplateName","filePath","partialName","getTemplate","resolve","cache","template","_getFile","then","file","compileTemplate","_precompileTemplate","_compileTemplate","err","_getDir","join","hash","i","render","context","data","exphbs","html","_renderTemplate","viewPath","callback","promise","reject","value","view","views","settings","viewsPath","_resolveViewsPath","relative","renderOptions","layout","layoutPath","_resolveLayoutPath","body","resetCache","filePathsOrFilter","filter","compile","trim","precompile","pattern","glob","cwd","follow","posix","_throwTestError","name","endsWith","substring","lastDir","dirname","absoluteViews","v","index","indexOf","exports","default"],"sources":["C:\\Users\\david\\Documents\\ProyectoReact\\Backend\\node_modules\\express-handlebars\\lib\\express-handlebars.ts"],"sourcesContent":["/*\n * Copyright (c) 2015, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\nimport * as Handlebars from \"handlebars\";\nimport * as fs from \"graceful-fs\";\nimport * as path from \"node:path\";\nimport { promisify } from \"node:util\";\nimport { glob } from \"glob\";\nimport type {\n\tUnknownObject,\n\tHelperDelegateObject,\n\tConfigOptions,\n\tEngine,\n\tTemplateSpecificationObject,\n\tTemplateDelegateObject,\n\tFsCache,\n\tPartialTemplateOptions,\n\tPartialsDirObject,\n\tRenderOptions,\n\tRenderViewOptions,\n\tRenderCallback,\n\tHandlebarsImport,\n\tCompiledCache,\n\tPrecompiledCache,\n\tRenameFunction,\n} from \"../types\";\n\nconst readFile = promisify(fs.readFile);\n\n// -----------------------------------------------------------------------------\n\nconst defaultConfig: ConfigOptions = {\n\thandlebars: Handlebars,\n\textname: \".handlebars\",\n\tencoding: \"utf8\",\n\tlayoutsDir: undefined, // Default layouts directory is relative to `express settings.view` + `layouts/`\n\tpartialsDir: undefined, // Default partials directory is relative to `express settings.view` + `partials/`\n\tdefaultLayout: \"main\",\n\thelpers: undefined,\n\tcompilerOptions: undefined,\n\truntimeOptions: undefined,\n};\n\nexport default class ExpressHandlebars {\n\tconfig: ConfigOptions;\n\tengine: Engine;\n\tencoding: BufferEncoding;\n\tlayoutsDir: string;\n\textname: string;\n\tcompiled: CompiledCache;\n\tprecompiled: PrecompiledCache;\n\t_fsCache: FsCache;\n\tpartialsDir: string|PartialsDirObject|(string|PartialsDirObject)[];\n\tcompilerOptions: CompileOptions;\n\truntimeOptions: RuntimeOptions;\n\thelpers: HelperDelegateObject;\n\tdefaultLayout: string;\n\thandlebars: HandlebarsImport;\n\n\tconstructor (config: ConfigOptions = {}) {\n\t\t// Config properties with defaults.\n\t\tObject.assign(this, defaultConfig, config);\n\n\t\t// save given config to override other settings.\n\t\tthis.config = config;\n\n\t\t// Express view engine integration point.\n\t\tthis.engine = this.renderView.bind(this);\n\n\t\t// Normalize `extname`.\n\t\tif (this.extname.charAt(0) !== \".\") {\n\t\t\tthis.extname = \".\" + this.extname;\n\t\t}\n\n\t\t// Internal caches of compiled and precompiled templates.\n\t\tthis.compiled = {};\n\t\tthis.precompiled = {};\n\n\t\t// Private internal file system cache.\n\t\tthis._fsCache = {};\n\t}\n\n\tasync getPartials (options: PartialTemplateOptions = {}): Promise<TemplateSpecificationObject|TemplateDelegateObject> {\n\t\tif (typeof this.partialsDir === \"undefined\") {\n\t\t\treturn {};\n\t\t}\n\t\tconst partialsDirs = Array.isArray(this.partialsDir) ? this.partialsDir : [this.partialsDir];\n\n\t\tconst dirs = await Promise.all(partialsDirs.map(async dir => {\n\t\t\tlet dirPath: string;\n\t\t\tlet dirTemplates: TemplateDelegateObject;\n\t\t\tlet dirNamespace: string;\n\t\t\tlet dirRename: RenameFunction;\n\n\t\t\t// Support `partialsDir` collection with object entries that contain a\n\t\t\t// templates promise and a namespace.\n\t\t\tif (typeof dir === \"string\") {\n\t\t\t\tdirPath = dir;\n\t\t\t} else if (typeof dir === \"object\") {\n\t\t\t\tdirTemplates = dir.templates;\n\t\t\t\tdirNamespace = dir.namespace;\n\t\t\t\tdirRename = dir.rename;\n\t\t\t\tdirPath = dir.dir;\n\t\t\t}\n\n\t\t\t// We must have some path to templates, or templates themselves.\n\t\t\tif (!dirPath && !dirTemplates) {\n\t\t\t\tthrow new Error(\"A partials dir must be a string or config object\");\n\t\t\t}\n\n\t\t\tconst templates: HandlebarsTemplateDelegate|TemplateSpecification = dirTemplates || await this.getTemplates(dirPath, options);\n\n\t\t\treturn {\n\t\t\t\ttemplates: templates as HandlebarsTemplateDelegate|TemplateSpecification,\n\t\t\t\tnamespace: dirNamespace,\n\t\t\t\trename: dirRename,\n\t\t\t};\n\t\t}));\n\n\t\tconst partials: TemplateDelegateObject|TemplateSpecificationObject = {};\n\n\t\tfor (const dir of dirs) {\n\t\t\tconst { templates, namespace, rename } = dir;\n\t\t\tconst filePaths = Object.keys(templates);\n\n\t\t\tconst getTemplateNameFn = typeof rename === \"function\"\n\t\t\t\t? rename\n\t\t\t\t: this._getTemplateName.bind(this);\n\n\t\t\tfor (const filePath of filePaths) {\n\t\t\t\tconst partialName = getTemplateNameFn(filePath, namespace);\n\t\t\t\tpartials[partialName] = templates[filePath];\n\t\t\t}\n\t\t}\n\n\t\treturn partials;\n\t}\n\n\tasync getTemplate (filePath: string, options: PartialTemplateOptions = {}): Promise<HandlebarsTemplateDelegate|TemplateSpecification> {\n\t\tfilePath = path.resolve(filePath);\n\n\t\tconst encoding = options.encoding || this.encoding;\n\t\tconst cache: PrecompiledCache|CompiledCache = options.precompiled ? this.precompiled : this.compiled;\n\t\tconst template: Promise<HandlebarsTemplateDelegate|TemplateSpecification> = options.cache && cache[filePath];\n\n\t\tif (template) {\n\t\t\treturn template;\n\t\t}\n\n\t\t// Optimistically cache template promise to reduce file system I/O, but\n\t\t// remove from cache if there was a problem.\n\t\ttry {\n\t\t\tcache[filePath] = this._getFile(filePath, { cache: options.cache, encoding })\n\t\t\t\t.then((file: string) => {\n\t\t\t\t\tconst compileTemplate: (file: string, options: RuntimeOptions) => TemplateSpecification|HandlebarsTemplateDelegate = (options.precompiled ? this._precompileTemplate : this._compileTemplate).bind(this);\n\t\t\t\t\treturn compileTemplate(file, this.compilerOptions);\n\t\t\t\t});\n\t\t\treturn await cache[filePath];\n\t\t} catch (err) {\n\t\t\tdelete cache[filePath];\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tasync getTemplates (dirPath: string, options: PartialTemplateOptions = {}): Promise<HandlebarsTemplateDelegate|TemplateSpecification> {\n\t\tconst cache = options.cache;\n\n\t\tconst filePaths = await this._getDir(dirPath, { cache });\n\t\tconst templates = await Promise.all(filePaths.map(filePath => {\n\t\t\treturn this.getTemplate(path.join(dirPath, filePath), options);\n\t\t}));\n\n\t\tconst hash = {};\n\t\tfor (let i = 0; i < filePaths.length; i++) {\n\t\t\thash[filePaths[i]] = templates[i];\n\t\t}\n\t\treturn hash;\n\t}\n\n\tasync render (filePath: string, context: UnknownObject = {}, options: RenderOptions = {}): Promise<string> {\n\t\tconst encoding = options.encoding || this.encoding;\n\t\tconst [template, partials] = await Promise.all([\n\t\t\tthis.getTemplate(filePath, { cache: options.cache, encoding }) as Promise<HandlebarsTemplateDelegate>,\n\t\t\t(options.partials || this.getPartials({ cache: options.cache, encoding })) as Promise<TemplateDelegateObject>,\n\t\t]);\n\t\tconst helpers: HelperDelegateObject = { ...this.helpers, ...options.helpers };\n\t\tconst runtimeOptions = { ...this.runtimeOptions, ...options.runtimeOptions };\n\n\t\t// Add ExpressHandlebars metadata to the data channel so that it's\n\t\t// accessible within the templates and helpers, namespaced under:\n\t\t// `@exphbs.*`\n\t\tconst data = {\n\t\t\t...options.data,\n\t\t\texphbs: {\n\t\t\t\t...options,\n\t\t\t\tfilePath,\n\t\t\t\thelpers,\n\t\t\t\tpartials,\n\t\t\t\truntimeOptions,\n\t\t\t},\n\t\t};\n\n\t\tconst html = this._renderTemplate(template, context, {\n\t\t\t...runtimeOptions,\n\t\t\tdata,\n\t\t\thelpers,\n\t\t\tpartials,\n\t\t});\n\n\t\treturn html;\n\t}\n\n\tasync renderView (viewPath: string): Promise<string>;\n\tasync renderView (viewPath: string, options: RenderViewOptions): Promise<string>;\n\tasync renderView (viewPath: string, callback: RenderCallback): Promise<null>;\n\tasync renderView (viewPath: string, options: RenderViewOptions, callback: RenderCallback): Promise<null>;\n\tasync renderView (viewPath: string, options: RenderViewOptions|RenderCallback = {}, callback: RenderCallback|null = null): Promise<string|null> {\n\t\tif (typeof options === \"function\") {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\tconst context = options as UnknownObject;\n\n\t\tlet promise: Promise<string>|null = null;\n\t\tif (!callback) {\n\t\t\tpromise = new Promise((resolve, reject) => {\n\t\t\t\tcallback = (err, value) => { err !== null ? reject(err) : resolve(value); };\n\t\t\t});\n\t\t}\n\n\t\t// Express provides `settings.views` which is the path to the views dir that\n\t\t// the developer set on the Express app. When this value exists, it's used\n\t\t// to compute the view's name. Layouts and Partials directories are relative\n\t\t// to `settings.view` path\n\t\tlet view: string;\n\t\tconst views = options.settings && options.settings.views;\n\t\tconst viewsPath = this._resolveViewsPath(views, viewPath);\n\t\tif (viewsPath) {\n\t\t\tview = this._getTemplateName(path.relative(viewsPath, viewPath));\n\t\t\tthis.partialsDir = this.config.partialsDir || path.join(viewsPath, \"partials/\");\n\t\t\tthis.layoutsDir = this.config.layoutsDir || path.join(viewsPath, \"layouts/\");\n\t\t}\n\n\t\tconst encoding = options.encoding || this.encoding;\n\n\t\t// Merge render-level and instance-level helpers together.\n\t\tconst helpers = { ...this.helpers, ...options.helpers };\n\n\t\t// Merge render-level and instance-level partials together.\n\t\tconst partials: TemplateDelegateObject = {\n\t\t\t...await this.getPartials({ cache: options.cache, encoding }) as TemplateDelegateObject,\n\t\t\t...(options.partials || {}),\n\t\t};\n\n\t\t// Pluck-out ExpressHandlebars-specific options and Handlebars-specific\n\t\t// rendering options.\n\t\tconst renderOptions = {\n\t\t\tcache: options.cache,\n\t\t\tencoding,\n\t\t\tview,\n\t\t\tlayout: \"layout\" in options ? options.layout : this.defaultLayout,\n\t\t\tdata: options.data,\n\t\t\thelpers,\n\t\t\tpartials,\n\t\t\truntimeOptions: options.runtimeOptions,\n\t\t};\n\n\t\ttry {\n\t\t\tlet html = await this.render(viewPath, context, renderOptions);\n\t\t\tconst layoutPath = this._resolveLayoutPath(renderOptions.layout);\n\n\t\t\tif (layoutPath) {\n\t\t\t\thtml = await this.render(\n\t\t\t\t\tlayoutPath,\n\t\t\t\t\t{ ...context, body: html },\n\t\t\t\t\t{ ...renderOptions, layout: undefined },\n\t\t\t\t);\n\t\t\t}\n\t\t\tcallback(null, html);\n\t\t} catch (err) {\n\t\t\tcallback(err);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\tresetCache (filePathsOrFilter?: string | string[] | ((template: string) => boolean)) {\n\t\tlet filePaths: string[] = [];\n\n\t\tif (typeof filePathsOrFilter === \"undefined\") {\n\t\t\tfilePaths = Object.keys(this._fsCache);\n\t\t} else if (typeof filePathsOrFilter === \"string\") {\n\t\t\tfilePaths = [filePathsOrFilter];\n\t\t} else if (typeof filePathsOrFilter === \"function\") {\n\t\t\tfilePaths = Object.keys(this._fsCache).filter(filePathsOrFilter);\n\t\t} else if (Array.isArray(filePathsOrFilter)) {\n\t\t\tfilePaths = filePathsOrFilter;\n\t\t}\n\n\t\tfor (const filePath of filePaths) {\n\t\t\tdelete this._fsCache[filePath];\n\t\t}\n\t}\n\n\t// -- Protected Hooks ----------------------------------------------------------\n\n\tprotected _compileTemplate (template: string, options: RuntimeOptions = {}): HandlebarsTemplateDelegate {\n\t\treturn this.handlebars.compile(template.trim(), options);\n\t}\n\n\tprotected _precompileTemplate (template: string, options: RuntimeOptions = {}): TemplateSpecification {\n\t\treturn this.handlebars.precompile(template.trim(), options);\n\t}\n\n\tprotected _renderTemplate (template: HandlebarsTemplateDelegate, context: UnknownObject = {}, options: RuntimeOptions = {}): string {\n\t\treturn template(context, options).trim();\n\t}\n\n\t// -- Private ------------------------------------------------------------------\n\n\tprivate async _getDir (dirPath: string, options: PartialTemplateOptions = {}): Promise<string[]> {\n\t\tdirPath = path.resolve(dirPath);\n\n\t\tconst cache = this._fsCache;\n\t\tlet dir = options.cache && (cache[dirPath] as Promise<string[]>);\n\n\t\tif (dir) {\n\t\t\treturn [...await dir];\n\t\t}\n\n\t\tconst pattern = \"**/*\" + this.extname;\n\n\t\t// Optimistically cache dir promise to reduce file system I/O, but remove\n\t\t// from cache if there was a problem.\n\n\t\ttry {\n\t\t\tdir = cache[dirPath] = glob(pattern, {\n\t\t\t\tcwd: dirPath,\n\t\t\t\tfollow: true,\n\t\t\t\tposix: true,\n\t\t\t});\n\t\t\t// @ts-expect-error FIXME: not sure how to throw error in glob for test coverage\n\t\t\tif (options._throwTestError) {\n\t\t\t\tthrow new Error(\"test\");\n\t\t\t}\n\n\t\t\treturn [...await dir];\n\t\t} catch (err) {\n\t\t\tdelete cache[dirPath];\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _getFile (filePath: string, options: PartialTemplateOptions = {}): Promise<string> {\n\t\tfilePath = path.resolve(filePath);\n\n\t\tconst cache = this._fsCache;\n\t\tconst encoding = options.encoding || this.encoding;\n\t\tconst file = options.cache && (cache[filePath] as Promise<string>);\n\n\t\tif (file) {\n\t\t\treturn file;\n\t\t}\n\n\t\t// Optimistically cache file promise to reduce file system I/O, but remove\n\t\t// from cache if there was a problem.\n\t\ttry {\n\t\t\tcache[filePath] = readFile(filePath, { encoding: encoding || \"utf8\" });\n\t\t\treturn await cache[filePath] as string;\n\t\t} catch (err) {\n\t\t\tdelete cache[filePath];\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate _getTemplateName (filePath: string, namespace: string = null): string {\n\t\tlet name = filePath;\n\n\t\tif (name.endsWith(this.extname)) {\n\t\t\tname = name.substring(0, name.length - this.extname.length);\n\t\t}\n\n\t\tif (namespace) {\n\t\t\tname = namespace + \"/\" + name;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tprivate _resolveViewsPath (views: string|string[], file: string): string|null {\n\t\tif (!Array.isArray(views)) {\n\t\t\treturn views;\n\t\t}\n\n\t\tlet lastDir = path.resolve(file);\n\t\tlet dir = path.dirname(lastDir);\n\t\tconst absoluteViews = views.map(v => path.resolve(v));\n\n\t\t// find the closest parent\n\t\twhile (dir !== lastDir) {\n\t\t\tconst index = absoluteViews.indexOf(dir);\n\t\t\tif (index >= 0) {\n\t\t\t\treturn views[index];\n\t\t\t}\n\t\t\tlastDir = dir;\n\t\t\tdir = path.dirname(lastDir);\n\t\t}\n\n\t\t// cannot resolve view\n\t\treturn null;\n\t}\n\n\tprivate _resolveLayoutPath (layoutPath: string): string|null {\n\t\tif (!layoutPath) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!path.extname(layoutPath)) {\n\t\t\tlayoutPath += this.extname;\n\t\t}\n\n\t\treturn path.resolve(this.layoutsDir || \"\", layoutPath);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}