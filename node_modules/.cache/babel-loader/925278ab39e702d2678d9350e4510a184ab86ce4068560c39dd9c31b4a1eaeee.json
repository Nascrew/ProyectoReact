{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unescape = void 0;\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nconst unescape = function (s) {\n  let {\n    windowsPathsNoEscape = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return windowsPathsNoEscape ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1') : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1');\n};\nexports.unescape = unescape;","map":{"version":3,"names":["unescape","s","windowsPathsNoEscape","arguments","length","undefined","replace","exports"],"sources":["C:\\Users\\david\\Documents\\ProyectoReact\\Backend\\node_modules\\express-handlebars\\node_modules\\minimatch\\src\\unescape.ts"],"sourcesContent":["import { MinimatchOptions } from './index.js'\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nexport const unescape = (\n  s: string,\n  {\n    windowsPathsNoEscape = false,\n  }: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n) => {\n  return windowsPathsNoEscape\n    ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1')\n    : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1')\n}\n"],"mappings":";;;;;;AACA;;;;;;;;;;;;;;AAcO,MAAMA,QAAQ,GAAG,SAAAA,CACtBC,CAAS,EAIP;EAAA,IAHF;IACEC,oBAAoB,GAAG;EAAK,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACsB,EAAE;EAEtD,OAAOD,oBAAoB,GACvBD,CAAC,CAACK,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,GACjCL,CAAC,CAACK,OAAO,CAAC,2BAA2B,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC;AAChF,CAAC;AATYC,OAAA,CAAAP,QAAQ,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}