{"ast":null,"code":"\"use strict\";\n\n// give it a pattern, and it'll be able to tell you if\n// a given path should be ignored.\n// Ignoring a path ignores its children if the pattern ends in /**\n// Ignores are always parsed in dot:true mode\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ignore = void 0;\nconst minimatch_1 = require(\"minimatch\");\nconst pattern_js_1 = require(\"./pattern.js\");\nconst defaultPlatform = typeof process === 'object' && process && typeof process.platform === 'string' ? process.platform : 'linux';\n/**\n * Class used to process ignored patterns\n */\nclass Ignore {\n  relative;\n  relativeChildren;\n  absolute;\n  absoluteChildren;\n  constructor(ignored, _ref) {\n    let {\n      nobrace,\n      nocase,\n      noext,\n      noglobstar,\n      platform = defaultPlatform\n    } = _ref;\n    this.relative = [];\n    this.absolute = [];\n    this.relativeChildren = [];\n    this.absoluteChildren = [];\n    const mmopts = {\n      dot: true,\n      nobrace,\n      nocase,\n      noext,\n      noglobstar,\n      optimizationLevel: 2,\n      platform,\n      nocomment: true,\n      nonegate: true\n    };\n    // this is a little weird, but it gives us a clean set of optimized\n    // minimatch matchers, without getting tripped up if one of them\n    // ends in /** inside a brace section, and it's only inefficient at\n    // the start of the walk, not along it.\n    // It'd be nice if the Pattern class just had a .test() method, but\n    // handling globstars is a bit of a pita, and that code already lives\n    // in minimatch anyway.\n    // Another way would be if maybe Minimatch could take its set/globParts\n    // as an option, and then we could at least just use Pattern to test\n    // for absolute-ness.\n    // Yet another way, Minimatch could take an array of glob strings, and\n    // a cwd option, and do the right thing.\n    for (const ign of ignored) {\n      const mm = new minimatch_1.Minimatch(ign, mmopts);\n      for (let i = 0; i < mm.set.length; i++) {\n        const parsed = mm.set[i];\n        const globParts = mm.globParts[i];\n        const p = new pattern_js_1.Pattern(parsed, globParts, 0, platform);\n        const m = new minimatch_1.Minimatch(p.globString(), mmopts);\n        const children = globParts[globParts.length - 1] === '**';\n        const absolute = p.isAbsolute();\n        if (absolute) this.absolute.push(m);else this.relative.push(m);\n        if (children) {\n          if (absolute) this.absoluteChildren.push(m);else this.relativeChildren.push(m);\n        }\n      }\n    }\n  }\n  ignored(p) {\n    const fullpath = p.fullpath();\n    const fullpaths = `${fullpath}/`;\n    const relative = p.relative() || '.';\n    const relatives = `${relative}/`;\n    for (const m of this.relative) {\n      if (m.match(relative) || m.match(relatives)) return true;\n    }\n    for (const m of this.absolute) {\n      if (m.match(fullpath) || m.match(fullpaths)) return true;\n    }\n    return false;\n  }\n  childrenIgnored(p) {\n    const fullpath = p.fullpath() + '/';\n    const relative = (p.relative() || '.') + '/';\n    for (const m of this.relativeChildren) {\n      if (m.match(relative)) return true;\n    }\n    for (const m of this.absoluteChildren) {\n      if (m.match(fullpath)) true;\n    }\n    return false;\n  }\n}\nexports.Ignore = Ignore;","map":{"version":3,"names":["minimatch_1","require","pattern_js_1","defaultPlatform","process","platform","Ignore","relative","relativeChildren","absolute","absoluteChildren","constructor","ignored","_ref","nobrace","nocase","noext","noglobstar","mmopts","dot","optimizationLevel","nocomment","nonegate","ign","mm","Minimatch","i","set","length","parsed","globParts","p","Pattern","m","globString","children","isAbsolute","push","fullpath","fullpaths","relatives","match","childrenIgnored","exports"],"sources":["C:\\Users\\david\\Documents\\ProyectoReact\\Backend\\node_modules\\express-handlebars\\node_modules\\glob\\src\\ignore.ts"],"sourcesContent":["// give it a pattern, and it'll be able to tell you if\n// a given path should be ignored.\n// Ignoring a path ignores its children if the pattern ends in /**\n// Ignores are always parsed in dot:true mode\n\nimport { Minimatch } from 'minimatch'\nimport { Path } from 'path-scurry'\nimport { Pattern } from './pattern.js'\nimport { GlobWalkerOpts } from './walker.js'\n\nexport interface IgnoreLike {\n  ignored?: (p: Path) => boolean\n  childrenIgnored?: (p: Path) => boolean\n}\n\nconst defaultPlatform: NodeJS.Platform =\n  typeof process === 'object' &&\n  process &&\n  typeof process.platform === 'string'\n    ? process.platform\n    : 'linux'\n\n/**\n * Class used to process ignored patterns\n */\nexport class Ignore implements IgnoreLike {\n  relative: Minimatch[]\n  relativeChildren: Minimatch[]\n  absolute: Minimatch[]\n  absoluteChildren: Minimatch[]\n\n  constructor(\n    ignored: string[],\n    {\n      nobrace,\n      nocase,\n      noext,\n      noglobstar,\n      platform = defaultPlatform,\n    }: GlobWalkerOpts\n  ) {\n    this.relative = []\n    this.absolute = []\n    this.relativeChildren = []\n    this.absoluteChildren = []\n    const mmopts = {\n      dot: true,\n      nobrace,\n      nocase,\n      noext,\n      noglobstar,\n      optimizationLevel: 2,\n      platform,\n      nocomment: true,\n      nonegate: true,\n    }\n\n    // this is a little weird, but it gives us a clean set of optimized\n    // minimatch matchers, without getting tripped up if one of them\n    // ends in /** inside a brace section, and it's only inefficient at\n    // the start of the walk, not along it.\n    // It'd be nice if the Pattern class just had a .test() method, but\n    // handling globstars is a bit of a pita, and that code already lives\n    // in minimatch anyway.\n    // Another way would be if maybe Minimatch could take its set/globParts\n    // as an option, and then we could at least just use Pattern to test\n    // for absolute-ness.\n    // Yet another way, Minimatch could take an array of glob strings, and\n    // a cwd option, and do the right thing.\n    for (const ign of ignored) {\n      const mm = new Minimatch(ign, mmopts)\n      for (let i = 0; i < mm.set.length; i++) {\n        const parsed = mm.set[i]\n        const globParts = mm.globParts[i]\n        const p = new Pattern(parsed, globParts, 0, platform)\n        const m = new Minimatch(p.globString(), mmopts)\n        const children = globParts[globParts.length - 1] === '**'\n        const absolute = p.isAbsolute()\n        if (absolute) this.absolute.push(m)\n        else this.relative.push(m)\n        if (children) {\n          if (absolute) this.absoluteChildren.push(m)\n          else this.relativeChildren.push(m)\n        }\n      }\n    }\n  }\n\n  ignored(p: Path): boolean {\n    const fullpath = p.fullpath()\n    const fullpaths = `${fullpath}/`\n    const relative = p.relative() || '.'\n    const relatives = `${relative}/`\n    for (const m of this.relative) {\n      if (m.match(relative) || m.match(relatives)) return true\n    }\n    for (const m of this.absolute) {\n      if (m.match(fullpath) || m.match(fullpaths)) return true\n    }\n    return false\n  }\n\n  childrenIgnored(p: Path): boolean {\n    const fullpath = p.fullpath() + '/'\n    const relative = (p.relative() || '.') + '/'\n    for (const m of this.relativeChildren) {\n      if (m.match(relative)) return true\n    }\n    for (const m of this.absoluteChildren) {\n      if (m.match(fullpath)) true\n    }\n    return false\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}